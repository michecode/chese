/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Chese {
  export type ListingStruct = {
    itemId: BigNumberish;
    nftContract: string;
    tokenId: BigNumberish;
    price: BigNumberish;
    seller: string;
    owner: string;
    active: boolean;
  };

  export type ListingStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean
  ] & {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    owner: string;
    active: boolean;
  };
}

export interface CheseInterface extends utils.Interface {
  contractName: "Chese";
  functions: {
    "createListing(address,uint256,uint256)": FunctionFragment;
    "createListingSale(address,uint256)": FunctionFragment;
    "fetchAllListings()": FunctionFragment;
    "fetchListings()": FunctionFragment;
    "fetchSellerListings(address)": FunctionFragment;
    "getApproval(address)": FunctionFragment;
    "getNumActiveListings()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellerListingCount(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlist(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createListing",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createListingSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSellerListings",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getApproval", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNumActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlist",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListingSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSellerListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;

  events: {
    "ListingSold(uint256,address)": EventFragment;
    "NewListing(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedListing(uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ListingSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedListing"): EventFragment;
}

export type ListingSoldEvent = TypedEvent<
  [BigNumber, string],
  { listingId: BigNumber; owner: string }
>;

export type ListingSoldEventFilter = TypedEventFilter<ListingSoldEvent>;

export type NewListingEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
  {
    listingId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    active: boolean;
  }
>;

export type NewListingEventFilter = TypedEventFilter<NewListingEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemovedListingEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  {
    listingId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
  }
>;

export type RemovedListingEventFilter = TypedEventFilter<RemovedListingEvent>;

export interface Chese extends BaseContract {
  contractName: "Chese";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createListing(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createListingSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchAllListings(
      overrides?: CallOverrides
    ): Promise<[Chese.ListingStructOutput[]]>;

    fetchListings(
      overrides?: CallOverrides
    ): Promise<[Chese.ListingStructOutput[]]>;

    fetchSellerListings(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[Chese.ListingStructOutput[]]>;

    getApproval(
      nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumActiveListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlist(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createListing(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createListingSale(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchAllListings(
    overrides?: CallOverrides
  ): Promise<Chese.ListingStructOutput[]>;

  fetchListings(
    overrides?: CallOverrides
  ): Promise<Chese.ListingStructOutput[]>;

  fetchSellerListings(
    seller: string,
    overrides?: CallOverrides
  ): Promise<Chese.ListingStructOutput[]>;

  getApproval(
    nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellerListingCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlist(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createListing(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createListingSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchAllListings(
      overrides?: CallOverrides
    ): Promise<Chese.ListingStructOutput[]>;

    fetchListings(
      overrides?: CallOverrides
    ): Promise<Chese.ListingStructOutput[]>;

    fetchSellerListings(
      seller: string,
      overrides?: CallOverrides
    ): Promise<Chese.ListingStructOutput[]>;

    getApproval(nftContract: string, overrides?: CallOverrides): Promise<void>;

    getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlist(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ListingSold(uint256,address)"(
      listingId?: BigNumberish | null,
      owner?: null
    ): ListingSoldEventFilter;
    ListingSold(
      listingId?: BigNumberish | null,
      owner?: null
    ): ListingSoldEventFilter;

    "NewListing(uint256,address,uint256,address,address,uint256,bool)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      active?: null
    ): NewListingEventFilter;
    NewListing(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      active?: null
    ): NewListingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemovedListing(uint256,address,uint256,address)"(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): RemovedListingEventFilter;
    RemovedListing(
      listingId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null
    ): RemovedListingEventFilter;
  };

  estimateGas: {
    createListing(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createListingSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchAllListings(overrides?: CallOverrides): Promise<BigNumber>;

    fetchListings(overrides?: CallOverrides): Promise<BigNumber>;

    fetchSellerListings(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproval(
      nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlist(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createListing(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createListingSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchAllListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchSellerListings(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproval(
      nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumActiveListings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlist(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CheseInterface extends utils.Interface {
  contractName: "Chese";
  functions: {
    "activeListings()": FunctionFragment;
    "createListing(string,uint256,uint256,address)": FunctionFragment;
    "getActiveListings()": FunctionFragment;
    "getNumActiveListings()": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "getSellersListings(address)": FunctionFragment;
    "listingToSeller(uint256)": FunctionFragment;
    "listings(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeListing(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellerListingCount(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumActiveListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellersListings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listingToSeller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerListingCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellersListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingToSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewListing(uint256,string,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedListing(uint256,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedListing"): EventFragment;
}

export type NewListingEvent = TypedEvent<
  [BigNumber, string, string],
  { id: BigNumber; name: string; seller: string }
>;

export type NewListingEventFilter = TypedEventFilter<NewListingEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemovedListingEvent = TypedEvent<
  [BigNumber, string, string],
  { id: BigNumber; name: string; seller: string }
>;

export type RemovedListingEventFilter = TypedEventFilter<RemovedListingEvent>;

export interface Chese extends BaseContract {
  contractName: "Chese";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    createListing(
      _name: string,
      _price: BigNumberish,
      _tokenId: BigNumberish,
      _nftContract: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActiveListings(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getNumActiveListings(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellersListings(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    listingToSeller(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, BigNumber, BigNumber, string, string] & {
        id: BigNumber;
        active: boolean;
        name: string;
        price: BigNumber;
        tokenId: BigNumber;
        nftContract: string;
        seller: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeListing(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeListings(overrides?: CallOverrides): Promise<BigNumber>;

  createListing(
    _name: string,
    _price: BigNumberish,
    _tokenId: BigNumberish,
    _nftContract: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActiveListings(overrides?: CallOverrides): Promise<BigNumber[]>;

  getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    _listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellersListings(
    _seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listingToSeller(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  listings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string, BigNumber, BigNumber, string, string] & {
      id: BigNumber;
      active: boolean;
      name: string;
      price: BigNumber;
      tokenId: BigNumber;
      nftContract: string;
      seller: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeListing(
    _listingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellerListingCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeListings(overrides?: CallOverrides): Promise<BigNumber>;

    createListing(
      _name: string,
      _price: BigNumberish,
      _tokenId: BigNumberish,
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveListings(overrides?: CallOverrides): Promise<BigNumber[]>;

    getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellersListings(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listingToSeller(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, BigNumber, BigNumber, string, string] & {
        id: BigNumber;
        active: boolean;
        name: string;
        price: BigNumber;
        tokenId: BigNumber;
        nftContract: string;
        seller: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeListing(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewListing(uint256,string,address)"(
      id?: null,
      name?: null,
      seller?: null
    ): NewListingEventFilter;
    NewListing(id?: null, name?: null, seller?: null): NewListingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemovedListing(uint256,string,address)"(
      id?: null,
      name?: null,
      seller?: null
    ): RemovedListingEventFilter;
    RemovedListing(
      id?: null,
      name?: null,
      seller?: null
    ): RemovedListingEventFilter;
  };

  estimateGas: {
    activeListings(overrides?: CallOverrides): Promise<BigNumber>;

    createListing(
      _name: string,
      _price: BigNumberish,
      _tokenId: BigNumberish,
      _nftContract: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

    getNumActiveListings(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellersListings(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingToSeller(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeListing(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createListing(
      _name: string,
      _price: BigNumberish,
      _tokenId: BigNumberish,
      _nftContract: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActiveListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumActiveListings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellersListings(
      _seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingToSeller(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeListing(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellerListingCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
